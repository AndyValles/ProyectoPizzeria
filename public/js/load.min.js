'use strict';
//const axios = require('axios/dist/node/axios.cjs');
//const axios = require('axios').default;
//const axios = require('axios');
//window.Vue = require('vue');

export const query = (classname, context) => {
    return (context || document).querySelector(classname);
    //return document.querySelector(classname);
};

export const queryAll = (classname, context) => {
    return (context || document).querySelectorAll(classname);
    //return document.querySelectorAll(classname);
};

export const base_url = query("#base_url") != null ? query("#base_url").getAttribute("content") : null;
export const base_root = query("#base_root") != null ? query("#base_root").getAttribute("content") : null;


export const close_window = () => {
    window.location.href = base_url;
};

export const load_on = (doc, event, clase, func) => {
    doc.addEventListener(event, (e) => {
        let element = e.target.closest(clase);
        if (element) {
            try {
                func.call(element, e);
            } catch (e) {
                console.log(e);
            }
        }
    });
};

export const get = (url, id = "", func = element => {}) => {
    axios.get(url).
    then(res => {
        if (id != null && id != "") {
            query(id).innerHTML = res.data;
        }
        func.call(res.data);
    }).catch(err => {
        console.error(err);
    });
};

export const removeAddClass = (classAdd, classremove, classR) => {
    query(classAdd).classList.add(classR);
    query(classremove).classList.remove(classR);
};

export const validatesub = (classname, text, type, classicon) => {
    var classR = classname.replace("#", "").replace(".", "").replace(" ", "");
    var classM = type;

    if (query("." + classM) != null) {
        query(classname).parentNode.removeChild(query("." + classM));
    }
    if (query("." + classM) == null) {
        var span = document.createElement(type);
        span.innerHTML = text;
        span.classList.add(classM);
        span.classList.add(classicon);
        span.classList.add("df-ac-jc");
        query(classname).parentNode.appendChild(span);
    }
}

export const validateicon = (element) => {
    var html = "<div class='ctn-info-content'>" +
        "<div class='w-80'></div>" +
        "<div class='w-20 df-ac-jc important-text'><i class='icon-notification'></i></div>" +
        "</div>";
    query(element).innerHTML = html;
}

export const validateEmpty = (classname) => {
    var name;
    var cantidad = 0;
    if (typeof classname === "string") {
        if (query(element).value == "") {
            var name = query(classname).parentNode.firstElementChild.textContent.replace(":", "");
            query(classname).classList.add("input-error");
            validateicon(classname);
        } else {
            cantidad++;
        }
    } else {
        classname.forEach(element => {
            if (query(element).value == "") {
                var name = query(element).parentNode.firstElementChild.textContent.replace(":", "");
                query(element).classList.add("input-error");
                validateicon(element + "~ .icon-info-p");
            } else {
                cantidad++;
            }
        });
    }

    return cantidad > 0;
};

export const classResplace = (classname, classreplace, classR) => {
    return query(classname).classList.replace(classreplace, classR);
};

export const cargar_modal = (url) => {
    query(".modal").classList.add("dp-flex");
    axios.get(base_url + "/" + url).
    then(res => {
        query(".modal").innerHTML = res.data;
    }).catch(err => {
        console.error(err);
    });
}

export const close_modal = () => {
    query(".modal").classList.remove("dp-flex");
    query(".modal").innerHTML = "";
}

export function modifCssRules(classname) {
    var sheet = document.styleSheets;
    var style;
    for (var a = 0; a < sheet.length; a++) {
        for (var b = 0; b < sheet[a].cssRules.length; b++) {
            var classSelect = sheet[a].cssRules[b].selectorText;
            if (classSelect == classname) {
                style = sheet[a].cssRules[b].style;
            }
        }
    }
    return style;
}

export const getScript = (source) => {
    var script = document.createElement('script');
    script.src = source;
    document.body.appendChild(script);
}

export const getCSS = (source) => {
    var css = document.createElement('link');
    css.rel = "stylesheet";
    css.href = source;
    document.head.appendChild(css);
}
